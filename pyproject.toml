[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pragma-monorepo"
version = "2.3.0"
description = "Monorepo container"
license = "MIT"
authors = [
  {name = "0xevolve", email = "matthias@pragma.build"}
]
readme = "README.md"
requires-python = ">=3.11,<3.13"


[project.optional-dependencies]
optional = [
    "poethepoet >=0.21.1",
    "ruff >=0.4",
    "dunamai >= 1.7.0",
    "commitizen >=2.20.3"
]


[tool.hatch.build.targets.sdist]
# limit which files are included in the sdist (.tar.gz) asset,
# to exclude unnecessary files and directories from the distribution
include = [
    '/README.md',
    '/scripts',
    'VERSION',
]

[tool.hatch.build.targets.wheel]
packages = ["pragma-sdk", "pragma-utils", "price-pusher", "vrf-listener", "checkpointer", "merkle-maker", "lp-pricer"]

[tool.commitizen]
name = "cz_conventional_commits"
version = "2.4.8"
tag_format = "v$version"
version_files = [
  "VERSION",
  "pyproject.toml:^version",
  "pragma-sdk/VERSION",
  "pragma-sdk/pyproject.toml:^version",
  "pragma-sdk/pragma_sdk/__init__.py:^__version",
  "pragma-utils/VERSION",
  "pragma-utils/pyproject.toml:^version",
  "pragma-utils/pragma_utils/__init__.py:^__version",
  "price-pusher/VERSION",
  "price-pusher/pyproject.toml:^version",
  "price-pusher/price_pusher/__init__.py:^__version",
  "vrf-listener/VERSION",
  "vrf-listener/pyproject.toml:^version",
  "vrf-listener/vrf_listener/__init__.py:^__version",
  "checkpointer/VERSION",
  "checkpointer/pyproject.toml:^version",
  "checkpointer/checkpointer/__init__.py:^__version",
  "merkle-maker/VERSION",
  "merkle-maker/pyproject.toml:^version",
  "merkle-maker/merkle_maker/__init__.py:^__version",
  "lp-pricer/pyproject.toml:^version",
  "lp-pricer/merkle_maker/__init__.py:^__version",
]
update_changelog_on_bump = true
changelog_incremental = true
bump_message = "bump: $current_version â†’ $new_version"


[tool.poe.tasks]
update_abis = "find ./pragma-oracle -name '*.sierra.json' -exec cp -prv '{}' './pragma-sdk/pragma_sdk/onchain/abis' ';'"

[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".github",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
  "scripts",
  "pragma-oracle",
]
# Same as Black.
line-length = 88
indent-width = 4
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["E4", "E7", "E9", "F"]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
