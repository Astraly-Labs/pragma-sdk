name: Publish Pragma SDK
on:
  workflow_dispatch:
  release:
    types: [published]

env:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376
  DOCKER_DRIVER: overlay2
  IMAGE_SHA: ${{ github.repository }}:${{ github.sha }}
    
jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12.4'

      - name: Install poetry
        run: python -X utf8 -m pip install poetry

      - name: Build SDist
        run: poetry build -f sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    name: Upload package to PyPI
    needs: [build_sdist]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  upload_docker:
    name: Build and publish Docker image
    needs: [upload_pypi]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: astralylabs
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Extract package version
        run: |
          export PRAGMA_PACKAGE_VERSION=$(grep 'version = "' ./pyproject.toml | grep -m 1 -e '[0-9][0-9a-zA-Z]*[-.a-z0-9]*' -o)
          echo "PRAGMA_PACKAGE_VERSION=$PRAGMA_PACKAGE_VERSION" >> $GITHUB_ENV
          echo $PRAGMA_PACKAGE_VERSION

      - name: Build image
        run: docker build . --target production --build-arg PRAGMA_PACKAGE_VERSION=$PRAGMA_PACKAGE_VERSION -t astralylabs/pragma-client:${PRAGMA_PACKAGE_VERSION}

      - name: Push image
        run: docker push astralylabs/pragma-client:${PRAGMA_PACKAGE_VERSION}

  build_containers:
    strategy:
      matrix:
        package: [price-pusher, vrf-listener] # Add other packages that need containers here
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.package }}-dist
          path: ${{ matrix.package }}/dist
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.package }}
          push: true
          tags: ${{ env.IMAGE_SHA }}

  bump_version:
    needs: [build_containers]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.4
      - name: Install Commitizen
        run: pip install --upgrade Commitizen
      - name: Configure Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      - name: Bump version
        run: |
          git fetch --tags
          cz bump --retry || echo "probably nothing to do"
      - name: Push changes
        run: |
          TAG=$(git tag --points-at HEAD)
          if [[ $TAG ]]; then
            echo "Version bumped to $TAG"
            git push
            git push --tags
          else
            echo "Version NOT bumped"
          fi

        