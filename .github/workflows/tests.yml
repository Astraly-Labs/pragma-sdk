---
  name: Task - Build & Integration Tests
  
  on:
    workflow_dispatch:
    workflow_call:
  
  env: 
    PYTHON_VERSION: 3.12.4

  jobs:
    tests:
      continue-on-error: true
      runs-on: ubuntu-latest
      strategy:
        matrix:
          package: [pragma-utils, pragma-sdk, price-pusher, vrf-listener, checkpointer]
        fail-fast: false
      steps:
        - uses: actions/checkout@v3
          with:
            submodules: "true"
        - uses: CfirTsabari/actions-pipx@v1
        - name: Install poetry
          run: pipx install poetry
        - uses: actions/setup-python@v4
          with:
            python-version: ${{ env.PYTHON_VERSION }}
            cache: "poetry"
        - name: Install dependencies
          run: |
            cd ${{ matrix.package }}
            poetry install
  
        - name: Cache contracts
          id: cache-contracts
          uses: actions/cache@v3
          with:
            path: ./pragma-oracle/target
            key: ${{ runner.os }}-contracts-${{ hashFiles('./pragma-oracle/src', 'poetry.lock') }}
  
        - uses: software-mansion/setup-scarb@v1
          with:
            tool-versions: pragma-oracle/.tool-versions
  
        - name: Compile contracts
          if: steps.cache-contracts.outputs.cache-hit != 'true'
          working-directory: ./pragma-oracle
          run: |
            scarb -V
            scarb build
  
        - name: Check ABIs are up-to-date
          run: |
            # Find and compare *.sierra.json files in both directories
            for file in $(find ./pragma-oracle/target/dev -type f -name "*.sierra.json"); do
              # Extract the relative path of the file for comparison
              rel_path=${file#./pragma-oracle/target/dev}
              # Use diff to compare the file with its counterpart in the SDK directory
              diff "$file" "pragma-sdk/pragma_sdk/onchain/abis$rel_path" || (echo "Error: $rel_path in pragma-oracle/target does not match with pragma-sdk/pragma_sdk/onchain/abis/" && exit 1) 
            done
  
        - name: Install starknet-devnet
          working-directory: $HOME/.local/bin
          run: |
            wget https://github.com/0xSpaceShard/starknet-devnet-rs/releases/download/v0.1.2/starknet-devnet-x86_64-unknown-linux-gnu.tar.gz
            tar -xf starknet-devnet-x86_64-unknown-linux-gnu.tar.gz
            echo "$PWD/starknet-devnet" >> $GITHUB_PATH
            rm starknet-devnet-x86_64-unknown-linux-gnu.tar.gz
        
        - name: Run tests
          run: |
            cd ${{ matrix.package }}
            if [ "${{ matrix.package }}" = "pragma-sdk" ]; then
              poetry run poe test_client
              poetry run poe test_vrf
              poetry run poe test_fetchers
              poetry run poe test_unit
            else
              poetry run poe test
            fi
        - name: Generate coverage in XML
          run: |
            cd ${{ matrix.package }}
            poetry run coverage xml
        - name: Upload coverage to Codecov
          uses: codecov/codecov-action@v3
          env:
            CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}