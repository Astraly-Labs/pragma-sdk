name: CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CI_COMMIT_MESSAGE: CI Formatting Auto Commit
      CI_COMMIT_AUTHOR: ${{ github.event.repository.name }} CI
    steps:
      - uses: actions/checkout@v3
      # Python setup
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}
      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - run: poetry config installer.modern-installation false
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: make setup

      # Build artifacts
      - name: Event name
        run: echo "github.event_name=${{ github.event_name }}"
      - name: Format python files
        run: make format
      - name: Commit changes
        # Run on push events and commit only when there are changes, otherwise it continues
        if: github.event_name == 'push'
        run: |
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "pragma@users.noreply.github.com"
          git add -A
          git diff-index --quiet HEAD || (git commit -m "${{ env.CI_COMMIT_MESSAGE }}" && git push)
      - name: Compile all the cairo files
        run: |
          make format-check

  tests:
    runs-on: ubuntu-latest
    steps:
      
      # ====================== SETUP ====================== #

      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}
      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - run: poetry config installer.modern-installation false
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: make setup

      # ====================== CAIRO SETUP ====================== #

      - name: Install rust
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y

      - name: Clone Cairo1 compiler repository
        uses: actions/checkout@v3
        with:
          repository: starkware-libs/cairo
          persist-credentials: false
          ref: v2.1.0
          path: cairo

      - name: Cache rust dependencies
        id: cache-rust
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build compiler
        if: steps.cache-rust.outputs.cache-hit != 'true'
        working-directory: ./cairo
        run: |
          cargo build

      - name: Build starknet-compile
        working-directory: ./cairo
        run: |
          cargo run --bin starknet-compile -- --version
          cargo run --bin starknet-sierra-compile -- --version

      - name: Create manifest file
        run: |
          readlink -f cairo/Cargo.toml >> starknet_py/tests/e2e/manifest-path
      
      # ---------------------------------------------------------- #
      # ........................RUN-TESTS......................... #
      # ---------------------------------------------------------- #

      - name: Run tests
        run: make test-no-log
      - name: Upload coverage report to codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage/
      - name: Store performance artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ./coverage/
          name: coverage